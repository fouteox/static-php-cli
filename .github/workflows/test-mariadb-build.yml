name: "Test - MariaDB Build"

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  fetch-versions:
    name: "Fetch MariaDB versions"
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Fetch versions using check-services-versions.sh"
        id: versions
        run: |
          # Source the centralized config
          source .github/config/services-config.sh

          # Fetch MariaDB releases from endoflife.date API
          response=$(curl -s "https://endoflife.date/api/mariadb.json")

          # Get supported major versions from config
          major_versions=$(get_supported_versions "mariadb")

          # Extract latest version for each major version
          versions_array=()
          for major in $major_versions; do
            version=$(echo "$response" | jq -r "[.[] | select(.cycle | startswith(\"$major.\")) | select(.eol == false or (.eol | type) == \"string\")] | sort_by(.releaseDate) | reverse | .[0].latest")
            if [[ "$version" != "null" && -n "$version" ]]; then
              versions_array+=("$version")
              echo "  MariaDB $major: $version"
            fi
          done

          # Build matrix JSON (compact, single line)
          matrix_items=$(printf '{"version": "%s"},' "${versions_array[@]}" | sed 's/,$//')
          matrix=$(echo "{\"include\": [$matrix_items]}" | jq -c)

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build-openssl:
    name: "Build OpenSSL static library"
    runs-on: macos-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Build OpenSSL 3.5.3"
        run: |
          OPENSSL_DIR="/tmp/openssl-static"
          mkdir -p "$OPENSSL_DIR"

          curl -fsSL -o openssl-3.5.3.tar.gz https://www.openssl.org/source/openssl-3.5.3.tar.gz
          tar xzf openssl-3.5.3.tar.gz
          cd openssl-3.5.3

          ./Configure darwin64-arm64-cc \
            --prefix="$OPENSSL_DIR" \
            --openssldir="$OPENSSL_DIR" \
            no-shared \
            no-tests \
            no-docs

          make
          make install_sw

          echo "[INFO] OpenSSL built successfully"
          ls -lah "$OPENSSL_DIR/lib/"

      - name: "Upload OpenSSL artifact"
        uses: actions/upload-artifact@v4
        with:
          name: openssl-static-macos-arm64
          path: /tmp/openssl-static/
          retention-days: 1

  build-mariadb:
    name: "Build MariaDB ${{ matrix.version }}"
    runs-on: macos-latest
    needs: [fetch-versions, build-openssl]
    timeout-minutes: 240
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      PREBUILT_OPENSSL_DIR: /tmp/openssl-static
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.fetch-versions.outputs.build-matrix) }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Download OpenSSL artifact"
        uses: actions/download-artifact@v4
        with:
          name: openssl-static-macos-arm64
          path: /tmp/openssl-static

      - name: "Setup dependencies"
        run: |
          brew install bison pkg-config ninja

      - name: "Generate Build Timestamp"
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated timestamp: $TIMESTAMP"

      - name: "Build MariaDB"
        run: |
          echo "[INFO] Building MariaDB version ${{ matrix.version }}"
          .github/scripts/mariadb-build.sh ${{ matrix.version }}

      - name: "Upload archive to R2"
        run: |
          VERSION="${{ matrix.version }}"
          ARCH=$(uname -m)
          WORKDIR="$HOME/fadogen-build/mariadb-$VERSION"
          ORIGINAL_ARCHIVE="$WORKDIR/mariadb-$VERSION-macos-$ARCH.tar.xz"

          # Verify archive exists
          if [[ ! -f "$ORIGINAL_ARCHIVE" ]]; then
            echo "[ERROR] Archive not found: $ORIGINAL_ARCHIVE"
            exit 1
          fi

          # Create unique archive name with timestamp
          TIMESTAMP="${{ steps.timestamp.outputs.timestamp }}"
          ARCHIVE_NAME="mariadb-$VERSION-macos-$ARCH-$TIMESTAMP.tar.xz"

          # Copy with new name
          cp "$ORIGINAL_ARCHIVE" "$ARCHIVE_NAME"

          # Calculate SHA512
          if command -v sha512sum >/dev/null 2>&1; then
            SHA512=$(sha512sum "$ARCHIVE_NAME" | awk '{print $1}')
          else
            SHA512=$(shasum -a 512 "$ARCHIVE_NAME" | awk '{print $1}')
          fi

          echo "[INFO] Archive: $ARCHIVE_NAME"
          echo "[INFO] SHA512: $SHA512"
          echo "[INFO] Size: $(du -h "$ARCHIVE_NAME" | cut -f1)"

          # Upload to R2
          aws s3 cp "$ARCHIVE_NAME" \
            s3://${{ secrets.R2_BUCKET_NAME }}/"$ARCHIVE_NAME" \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

          echo "[SUCCESS] Uploaded $ARCHIVE_NAME to R2"