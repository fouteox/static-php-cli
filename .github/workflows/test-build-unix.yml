name: "Test CI on Unix (Mock Build)"

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-and-sync:
    name: "Check PHP versions and sync"
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.sync.outputs.matrix }}
      eol-versions: ${{ steps.sync.outputs.eol }}
      should-build: ${{ steps.sync.outputs.should-build }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Mock sync PHP versions"
        id: sync
        run: |
          # Create mock metadata.json
          echo '{"last_sync": "", "versions": {}}' > metadata.json
          echo "Created mock metadata.json"

          # Create mock API response with limited versions for testing
          cat > api_response.json << 'EOF'
          {
            "data": {
              "8.3": {
                "name": "8.3.13",
                "versionId": 83,
                "releaseDate": "2024-10-24",
                "activeSupportEndDate": "2026-11-23",
                "eolDate": "2028-11-23",
                "isEOLVersion": false,
                "isSecureVersion": true,
                "isLatestVersion": false,
                "isFutureVersion": false,
                "isNextVersion": false
              },
              "8.4": {
                "name": "8.4.0",
                "versionId": 84,
                "releaseDate": "2024-11-21",
                "activeSupportEndDate": "2026-11-21",
                "eolDate": "2028-11-21",
                "isEOLVersion": false,
                "isSecureVersion": true,
                "isLatestVersion": true,
                "isFutureVersion": false,
                "isNextVersion": false
              }
            }
          }
          EOF

          # Run check versions script
          python3 .github/scripts/php_build_manager.py check-versions
          cat github_output.txt >> "$GITHUB_OUTPUT"

  # Mock build job (simulates build without actual PHP compilation)
  build:
    name: "Mock Build PHP ${{ matrix.php-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.runs-on }}
    needs: [check-and-sync]
    if: needs.check-and-sync.outputs.should-build == 'true'
    timeout-minutes: 5
    outputs:
      checksum: ${{ steps.output-checksum.outputs.checksum }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.check-and-sync.outputs.build-matrix) }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Mock PHP build"
        run: |
          echo "Simulating PHP ${{ matrix.php-version }} build on ${{ matrix.os }}..."

          # Create mock buildroot structure
          mkdir -p buildroot/bin
          echo "#!/bin/bash" > buildroot/bin/php
          echo "echo 'Mock PHP CLI ${{ matrix.php-version }}'" >> buildroot/bin/php
          echo "#!/bin/bash" > buildroot/bin/php-fpm
          echo "echo 'Mock PHP FPM ${{ matrix.php-version }}'" >> buildroot/bin/php-fpm
          chmod +x buildroot/bin/php buildroot/bin/php-fpm

          echo "Mock build completed"

      # Create mock archive
      - name: "Create mock PHP archive"
        run: |
          # Create mock tar.xz archive
          python3 .github/scripts/php_build_manager.py create-archive \
            --php-version ${{ matrix.php-version }} \
            --os ${{ matrix.os }}

          # Load archive info
          source archive_info.txt
          echo "Mock archive created: $ARCHIVE_NAME"
          echo "Mock SHA512: $ARCHIVE_SHA512"

      # Output checksum for metadata update
      - name: "Output checksum"
        id: output-checksum
        run: |
          # Load archive info
          source archive_info.txt

          # Output checksum in format: version,os,sha512
          echo "checksum=${{ matrix.php-version }},${{ matrix.os }},$ARCHIVE_SHA512" >> $GITHUB_OUTPUT

  update-metadata:
    name: "Update central metadata.json"
    runs-on: ubuntu-latest
    needs: [check-and-sync, build]
    if: needs.build.result == 'success'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Mock metadata update"
        run: |
          # Create empty metadata.json for testing
          echo '{"last_sync": "", "versions": {}}' > metadata.json
          echo "Created mock metadata.json (not downloading from R2 for test)"

          BUILD_MATRIX='${{ needs.check-and-sync.outputs.build-matrix }}'

          # Collect all checksums from build job outputs
          ALL_CHECKSUMS=$(echo '${{ toJSON(needs.build.outputs) }}' | jq -r '.[] | select(. != null)')

          echo "Build Matrix:"
          echo "$BUILD_MATRIX" | jq .
          echo ""
          echo "Collected Checksums:"
          echo "$ALL_CHECKSUMS"
          echo ""

          # Update metadata with build results
          python3 .github/scripts/php_build_manager.py update-metadata \
            --build-matrix "$BUILD_MATRIX" \
            --archive-checksums "$ALL_CHECKSUMS"

          echo "Final metadata.json:"
          cat metadata.json | jq .
          echo ""
          echo "Mock metadata update completed (not uploading to R2 for test)"

  cleanup-eol:
    name: "Mock cleanup EOL versions"
    runs-on: ubuntu-latest
    needs: [check-and-sync, update-metadata]
    if: needs.check-and-sync.outputs.eol-versions != '[]'
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Mock cleanup EOL versions"
        run: |
          EOL_VERSIONS='${{ needs.check-and-sync.outputs.eol-versions }}'
          echo "EOL versions to cleanup (mock): $EOL_VERSIONS"
          echo "Mock cleanup completed (not deleting from R2 for test)"