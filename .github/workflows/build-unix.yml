name: "CI on Unix"

on:
  workflow_dispatch:
    inputs:
      os:
        required: true
        description: Build target OS
        default: 'macos-aarch64'
        type: choice
        options:
          - 'linux-x86_64'
          - 'linux-aarch64'
          - 'linux-x86_64-glibc'
          - 'linux-aarch64-glibc'
          - 'macos-x86_64'
          - 'macos-aarch64'
      php-versions:
        required: true
        description: PHP versions to compile (comma separated)
        default: '8.4,8.3,8.2'
        type: string
      extensions:
        description: Extensions to build (comma separated)
        default: "bcmath,bz2,calendar,ctype,curl,dba,dom,exif,ffi,fileinfo,filter,ftp,gd,gmp,iconv,igbinary,imagick,imap,intl,ldap,lz4,mbstring,mongodb,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,pdo_pgsql,pdo_sqlite,pdo_sqlsrv,pgsql,phar,posix,readline,redis,session,shmop,simplexml,soap,sockets,sodium,sqlite3,sqlsrv,sysvmsg,sysvsem,sysvshm,tokenizer,xml,xmlreader,xmlwriter,xsl,zip,zlib"
        required: true
        type: string
      extra-libs:
        description: Extra libraries to build (optional, comma separated)
        type: string
      build-cli:
        description: Build cli binary
        default: true
        type: boolean
      build-micro:
        description: Build phpmicro binary
        type: boolean
      build-fpm:
        description: Build fpm binary
        default: true
        type: boolean
      prefer-pre-built:
        description: Prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      debug:
        description: Show full build logs
        type: boolean
      no-strip:
        description: Keep debug symbols for debugging
        type: boolean
        default: false
  workflow_call:
    inputs:
      os:
        required: true
        description: Build target OS
        default: 'macos-aarch64'
        type: string
      php-versions:
        required: true
        description: PHP versions to compile (comma separated)
        default: '8.4'
        type: string
      extensions:
        description: Extensions to build (comma separated)
        required: true
        type: string
      extra-libs:
        description: Extra libraries to build (optional, comma separated)
        type: string
      build-cli:
        description: Build cli binary
        default: true
        type: boolean
      build-micro:
        description: Build phpmicro binary
        type: boolean
      build-fpm:
        description: Build fpm binary
        default: true
        type: boolean
      prefer-pre-built:
        description: Prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      debug:
        description: Show full build logs
        type: boolean
      no-strip:
        description: Keep debug symbols for debugging
        type: boolean
        default: false

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  define-build:
    name: "Define Build Scripts"
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.gendef.outputs.run }}
      download: ${{ steps.gendef.outputs.download }}
      build: ${{ steps.gendef.outputs.build }}
      php-versions: ${{ steps.gendef.outputs.php-versions }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Define"
        id: gendef
        run: |
          case "${{ inputs.os }}" in
            linux-x86_64)
              DOWN_CMD="./bin/spc-alpine-docker download"
              BUILD_CMD="./bin/spc-alpine-docker build"
              RUNS_ON="ubuntu-latest"
              ;;
            linux-aarch64)
              DOWN_CMD="./bin/spc-alpine-docker download"
              BUILD_CMD="./bin/spc-alpine-docker build"
              RUNS_ON="ubuntu-24.04-arm"
              ;;
            linux-x86_64-glibc)
              DOWN_CMD="./bin/spc-gnu-docker download"
              BUILD_CMD="./bin/spc-gnu-docker build"
              RUNS_ON="ubuntu-22.04"
              ;;
            linux-aarch64-glibc)
              DOWN_CMD="./bin/spc-gnu-docker download"
              BUILD_CMD="./bin/spc-gnu-docker build"
              RUNS_ON="ubuntu-22.04-arm"
              ;;
            macos-x86_64)
              DOWN_CMD="curl -fsSL -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-macos-x86_64 && chmod +x spc && ./spc doctor --auto-fix && ./spc download"
              BUILD_CMD="./spc build"
              RUNS_ON="macos-13"
              ;;
            macos-aarch64)
              DOWN_CMD="curl -fsSL -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-macos-aarch64 && chmod +x spc && ./spc doctor --auto-fix && ./spc download"
              BUILD_CMD="./spc build"
              RUNS_ON="macos-latest"
              ;;
          esac
          BUILD_CMD="$BUILD_CMD ${{ inputs.extensions }}"
          if [ -n "${{ inputs.extra-libs }}" ]; then
            DOWN_CMD="$DOWN_CMD --for-libs=${{ inputs.extra-libs }}"
            BUILD_CMD="$BUILD_CMD --with-libs=${{ inputs.extra-libs }}"
          fi
          if [ ${{ inputs.debug }} == true ]; then
            DOWN_CMD="$DOWN_CMD --debug"
            BUILD_CMD="$BUILD_CMD --debug"
          fi
          if [ ${{ inputs.prefer-pre-built }} == true ]; then
              DOWN_CMD="$DOWN_CMD --prefer-pre-built"
          fi
          if [ ${{ inputs.build-cli }} == true ]; then
              BUILD_CMD="$BUILD_CMD --build-cli"
          fi
          if [ ${{ inputs.build-micro }} == true ]; then
              BUILD_CMD="$BUILD_CMD --build-micro"
          fi
          if [ ${{ inputs.build-fpm }} == true ]; then
              BUILD_CMD="$BUILD_CMD --build-fpm"
          fi
          echo 'download='"$DOWN_CMD" >> "$GITHUB_OUTPUT"
          echo 'build='"$BUILD_CMD" >> "$GITHUB_OUTPUT"
          echo 'run='"$RUNS_ON" >> "$GITHUB_OUTPUT"

          PHP_VERSIONS=$(echo '${{ inputs.php-versions }}' | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
          echo "php-versions=$PHP_VERSIONS" >> "$GITHUB_OUTPUT"
  build:
    name: "Build PHP ${{ matrix.php-version }} on ${{ inputs.os }}"
    runs-on: ${{ needs.define-build.outputs.run }}
    needs: define-build
    timeout-minutes: 240
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    strategy:
      fail-fast: false
      matrix:
        php-version: ${{ fromJSON(needs.define-build.outputs.php-versions) }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Setup PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: pecl, composer
          extensions: curl, openssl, mbstring
          ini-values: memory_limit=-1
        env:
          phpts: nts

      # Cache downloaded source
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-dependencies-${{ matrix.php-version }}-${{ inputs.os }}
      - name: "Download sources"
        run: |
          DOWNLOAD_CMD="${{ needs.define-build.outputs.download }} --with-php=${{ matrix.php-version }} --for-extensions=${{ inputs.extensions }} --ignore-cache-sources=php-src"
          if [ -n "${{ inputs.extra-libs }}" ]; then
            DOWNLOAD_CMD="$DOWNLOAD_CMD --for-libs=${{ inputs.extra-libs }}"
          fi
          if [ ${{ inputs.debug }} == true ]; then
            DOWNLOAD_CMD="$DOWNLOAD_CMD --debug"
          fi
          if [ ${{ inputs.prefer-pre-built }} == true ]; then
            DOWNLOAD_CMD="$DOWNLOAD_CMD --prefer-pre-built"
          fi
          eval "$DOWNLOAD_CMD"
      - name: "Build PHP"
        run: |
          BUILD_CMD="${{ needs.define-build.outputs.build }}"
          if [ -n "${{ inputs.extra-libs }}" ]; then
            BUILD_CMD="$BUILD_CMD --with-libs=${{ inputs.extra-libs }}"
          fi
          if [ ${{ inputs.debug }} == true ]; then
            BUILD_CMD="$BUILD_CMD --debug"
          fi
          if [ ${{ inputs.build-cli }} == true ]; then
            BUILD_CMD="$BUILD_CMD --build-cli"
          fi
          if [ ${{ inputs.build-micro }} == true ]; then
            BUILD_CMD="$BUILD_CMD --build-micro"
          fi
          if [ ${{ inputs.build-fpm }} == true ]; then
            BUILD_CMD="$BUILD_CMD --build-fpm"
          fi
          eval "$BUILD_CMD"
#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3

      # Upload cli executable to R2
      - if: ${{ inputs.build-cli == true }}
        name: "Compress and Upload PHP cli to R2"
        run: |
          xz -c buildroot/bin/php > php-cli-${{ matrix.php-version }}-${{ inputs.os }}.xz
          aws s3 cp php-cli-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-cli-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Upload micro self-extracted executable to R2
      - if: ${{ inputs.build-micro == true }}
        name: "Compress and Upload PHP micro to R2"
        run: |
          xz -c buildroot/bin/micro.sfx > php-micro-${{ matrix.php-version }}-${{ inputs.os }}.xz
          aws s3 cp php-micro-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-micro-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Upload fpm executable to R2
      - if: ${{ inputs.build-fpm == true }}
        name: "Compress and Upload PHP fpm to R2"
        run: |
          xz -c buildroot/bin/php-fpm > php-fpm-${{ matrix.php-version }}-${{ inputs.os }}.xz
          aws s3 cp php-fpm-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-fpm-${{ matrix.php-version }}-${{ inputs.os }}.xz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Upload license files to R2
      - name: "Upload License Files to R2"
        run: |
          tar -czf php-licenses-${{ matrix.php-version }}-${{ inputs.os }}.tar.gz -C buildroot/license .
          aws s3 cp php-licenses-${{ matrix.php-version }}-${{ inputs.os }}.tar.gz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-licenses-${{ matrix.php-version }}-${{ inputs.os }}.tar.gz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Upload build metadata to R2
      - name: "Upload Build Metadata to R2"
        run: |
          jq -s '{"extensions": .[0], "libraries": .[1]}' buildroot/build-extensions.json buildroot/build-libraries.json > php-metadata-${{ matrix.php-version }}-${{ inputs.os }}.json
          aws s3 cp php-metadata-${{ matrix.php-version }}-${{ inputs.os }}.json \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-metadata-${{ matrix.php-version }}-${{ inputs.os }}.json \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Update latest build index
      - name: "Update latest index"
        run: |
          echo '{
            "php_version": "${{ matrix.php-version }}",
            "os": "${{ inputs.os }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "files": {
              "cli": ${{ inputs.build-cli }},
              "micro": ${{ inputs.build-micro }},
              "fpm": ${{ inputs.build-fpm }}
            },
            "filenames": {
              "cli": "php-cli-${{ matrix.php-version }}-${{ inputs.os }}.xz",
              "micro": "php-micro-${{ matrix.php-version }}-${{ inputs.os }}.xz",
              "fpm": "php-fpm-${{ matrix.php-version }}-${{ inputs.os }}.xz",
              "licenses": "php-licenses-${{ matrix.php-version }}-${{ inputs.os }}.tar.gz",
              "metadata": "php-metadata-${{ matrix.php-version }}-${{ inputs.os }}.json"
            }
          }' | jq . > php-latest-${{ inputs.os }}-${{ matrix.php-version }}.json

          aws s3 cp php-latest-${{ inputs.os }}-${{ matrix.php-version }}.json \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-latest-${{ inputs.os }}-${{ matrix.php-version }}.json \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}
