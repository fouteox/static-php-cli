name: "CI on Unix"

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-and-sync:
    name: "Check PHP versions and sync"
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.sync.outputs.matrix }}
      eol-versions: ${{ steps.sync.outputs.eol }}
      should-build: ${{ steps.sync.outputs.should-build }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Sync PHP versions"
        id: sync
        run: |
          # Download current metadata.json from R2 (or create empty if not exists)
          if aws s3 cp s3://${{ secrets.R2_BUCKET_NAME }}/metadata.json metadata.json --endpoint-url ${{ secrets.R2_ENDPOINT }} 2>/dev/null; then
            echo "Downloaded existing metadata.json"
          else
            echo '{"last_sync": "", "versions": {}}' > metadata.json
            echo "Created empty metadata.json"
          fi

          # Fetch PHP.watch API
          echo "Fetching PHP.watch API..."
          curl -fsSL https://php.watch/api/v1/versions > api_response.json

          # Run check versions script
          python3 .github/scripts/check_versions.py
          cat github_output.txt >> "$GITHUB_OUTPUT"

  # Build job (dynamic matrix from check-and-sync)
  build:
    name: "Build PHP ${{ matrix.php-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.runs-on }}
    needs: [check-and-sync]
    if: needs.check-and-sync.outputs.should-build == 'true'
    timeout-minutes: 240
    outputs:
      checksums: ${{ steps.collect-checksums.outputs.checksums }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.check-and-sync.outputs.build-matrix) }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Setup PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: pecl, composer
          extensions: curl, openssl, mbstring
          ini-values: memory_limit=-1
        env:
          phpts: nts

      # Cache downloaded source
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-dependencies-${{ matrix.php-version }}-${{ matrix.os }}

      - name: "Download sources"
        run: |
          # Define extensions to download and build
          EXTENSIONS="bcmath,bz2,calendar,ctype,curl,dba,dom,exif,ffi,fileinfo,filter,ftp,gd,gmp,iconv,igbinary,imagick,imap,intl,ldap,lz4,mbstring,mongodb,mysqli,mysqlnd,opcache,openssl,pcntl,pdo,pdo_mysql,pdo_pgsql,pdo_sqlite,pdo_sqlsrv,pgsql,phar,posix,readline,redis,session,shmop,simplexml,soap,sockets,sodium,sqlite3,sqlsrv,sysvmsg,sysvsem,sysvshm,tokenizer,xml,xmlreader,xmlwriter,xsl,zip,zlib"

          # Define build commands for macOS aarch64
          DOWN_CMD="curl -fsSL -o spc https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-macos-aarch64 && chmod +x spc && ./spc doctor --auto-fix && ./spc download"

          DOWNLOAD_CMD="$DOWN_CMD --with-php=${{ matrix.php-version }} --for-extensions=\"$EXTENSIONS\" --ignore-cache-sources=php-src --prefer-pre-built"
          eval "$DOWNLOAD_CMD"

          # Export extensions for next step
          echo "EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: "Build PHP"
        run: |
          ./spc build $EXTENSIONS --build-cli --build-fpm

      # Upload cli executable to R2
      - name: "Compress and Upload PHP cli to R2"
        id: cli-upload
        run: |
          xz -c buildroot/bin/php > php-cli-${{ matrix.php-version }}-${{ matrix.os }}.xz
          CLI_SHA512=$(sha512sum php-cli-${{ matrix.php-version }}-${{ matrix.os }}.xz | cut -d' ' -f1)
          echo "cli_sha512=$CLI_SHA512" >> $GITHUB_OUTPUT
          aws s3 cp php-cli-${{ matrix.php-version }}-${{ matrix.os }}.xz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-cli-${{ matrix.php-version }}-${{ matrix.os }}.xz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Upload fpm executable to R2
      - name: "Compress and Upload PHP fpm to R2"
        id: fpm-upload
        run: |
          xz -c buildroot/bin/php-fpm > php-fpm-${{ matrix.php-version }}-${{ matrix.os }}.xz
          FPM_SHA512=$(sha512sum php-fpm-${{ matrix.php-version }}-${{ matrix.os }}.xz | cut -d' ' -f1)
          echo "fpm_sha512=$FPM_SHA512" >> $GITHUB_OUTPUT
          aws s3 cp php-fpm-${{ matrix.php-version }}-${{ matrix.os }}.xz \
            s3://${{ secrets.R2_BUCKET_NAME }}/php-fpm-${{ matrix.php-version }}-${{ matrix.os }}.xz \
            --endpoint-url ${{ secrets.R2_ENDPOINT }}

      # Collect checksums for output
      - name: "Collect checksums"
        id: collect-checksums
        run: |
          cat > checksums.json <<EOF
          {
            "php-version": "${{ matrix.php-version }}",
            "os": "${{ matrix.os }}",
            "cli_sha512": "${{ steps.cli-upload.outputs.cli_sha512 }}",
            "fpm_sha512": "${{ steps.fpm-upload.outputs.fpm_sha512 }}"
          }
          EOF
          echo "checksums=$(cat checksums.json | jq -c .)" >> $GITHUB_OUTPUT

  update-metadata:
    name: "Update central metadata.json"
    runs-on: ubuntu-latest
    needs: [check-and-sync, build]
    if: needs.build.result == 'success'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Update metadata.json"
        run: |
          # Download current metadata.json from R2 (or create empty if not exists)
          if aws s3 cp s3://${{ secrets.R2_BUCKET_NAME }}/metadata.json metadata.json --endpoint-url ${{ secrets.R2_ENDPOINT }} 2>/dev/null; then
            echo "Downloaded existing metadata.json"
          else
            echo '{"last_sync": "", "versions": {}}' > metadata.json
            echo "Created empty metadata.json"
          fi

          # Collect checksums from all build jobs
          CHECKSUMS_JSON='${{ toJSON(needs.build.outputs.checksums) }}'
          echo "$CHECKSUMS_JSON" > checksums.json

          # Update metadata with build results
          python3 .github/scripts/update_metadata.py \
            --build-matrix '${{ needs.check-and-sync.outputs.build-matrix }}' \
            --checksums-file checksums.json

          # Upload updated metadata.json to R2
          aws s3 cp metadata.json s3://${{ secrets.R2_BUCKET_NAME }}/metadata.json --endpoint-url ${{ secrets.R2_ENDPOINT }}
          echo "Uploaded updated metadata.json to R2"

  cleanup-eol:
    name: "Cleanup EOL versions"
    runs-on: ubuntu-latest
    needs: [check-and-sync, update-metadata]
    if: needs.check-and-sync.outputs.eol-versions != '[]'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Cleanup EOL versions"
        run: |
          EOL_VERSIONS='${{ needs.check-and-sync.outputs.eol-versions }}'
          echo "EOL versions to cleanup: $EOL_VERSIONS"

          # Define all OS targets
          ALL_OS="macos-aarch64"

          # Parse EOL versions from JSON array
          echo "$EOL_VERSIONS" | jq -r '.[]' | while read -r version; do
            echo "Cleaning up PHP $version..."

            for os in $ALL_OS; do
              echo "  Removing files for $version on $os"

              # Remove CLI binary
              aws s3 rm s3://${{ secrets.R2_BUCKET_NAME }}/php-cli-$version-$os.xz \
                --endpoint-url ${{ secrets.R2_ENDPOINT }} 2>/dev/null || echo "    php-cli-$version-$os.xz not found"

              # Remove FPM binary
              aws s3 rm s3://${{ secrets.R2_BUCKET_NAME }}/php-fpm-$version-$os.xz \
                --endpoint-url ${{ secrets.R2_ENDPOINT }} 2>/dev/null || echo "    php-fpm-$version-$os.xz not found"
            done
          done

          # Remove EOL versions from metadata.json
          if aws s3 cp s3://${{ secrets.R2_BUCKET_NAME }}/metadata.json metadata.json --endpoint-url ${{ secrets.R2_ENDPOINT }} 2>/dev/null; then
            python3 .github/scripts/cleanup_eol_metadata.py \
              --eol-versions '${{ needs.check-and-sync.outputs.eol-versions }}'
            aws s3 cp metadata.json s3://${{ secrets.R2_BUCKET_NAME }}/metadata.json --endpoint-url ${{ secrets.R2_ENDPOINT }}
            echo "Updated metadata.json after EOL cleanup"
          fi
